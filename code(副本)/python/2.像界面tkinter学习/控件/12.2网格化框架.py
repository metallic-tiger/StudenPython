#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# author:洪卫
 
import tkinter  as tk

#建立窗口类
master=tk.Tk()
a=tk.Label(master, text="First")
a.grid(row=0,sticky = 'w')
b=tk.Label(master, text="Second")
b.grid(row=1)


e1 =tk. Entry(master)
e2 =tk.Entry(master)
#放置在第0行第二列
#
#如果和其他控件重复就会覆盖之前的控件
e1.grid(row=0, column=1)
e2.grid(row=1, column=1)
#
#   sticky = 'w'
# 此选项从集合N（上），S（下），E（左），W（右）中获取一个或多个值。要将标签与左边框对齐，可以使用W （西）：
# 
# 
# 网格（类）[ ＃ ]
# 网格几何管理器。这是一个实现类; 所有小部件类都可以使用下面描述的所有方法。

# 网格（**选项） [＃ ]
# 按照选项的描述将小部件放在网格中。

# **选项
# 几何选项。
# column=
# 在此列插入小部件。列号从0开始。如果省略，则默认为0。
# columnspan =
# 如果给定，则表示窗口小部件单元应跨越多列。默认值为1。
# in_=
# ipadx =
# 可选的水平内部填充。像padx一样工作，但 在窗口小部件边框内添加了填充。默认值为0。
# ipady =
# 可选的垂直内部填充。像pady一样工作，但 在窗口小部件边框内添加了填充。默认值为0。
# padx =
# 可选的水平填充，用于放置在单元格中的窗口小部件周围。默认值为0。
# pady =
# 可选的垂直填充，用于放置在单元格中的窗口小部件周围。默认值为0。
# row=
# 在此行插入小部件。行号从0开始。如果省略，则默认为网格中的第一个空行。
# rowspan=
# 如果给定，则表示窗口小部件单元应跨越多行。默认值为1。
# sticky=
# 如果生成的单元格大于窗口小部件本身，则定义如何扩展窗口小部件。这可以是常数S，N， E和W，或NW，NE，SW和SE的任何组合。

# 例如，W（西）表示小部件应与左侧单元格边框对齐。W + E表示小部件应水平拉伸以填充整个单元格。W + E + N + S意味着小部件应该在两个方向上扩展。默认是将窗口小部件置于单元格中心。


# grid_bbox（column = None，row = None，col2 = None，row2 = None） [＃ ]
# grid_bbox方法。

# column
# row
# col2
# row2

# grid_columnconfigure（index, **options） [＃ ]
# 设置单元格列的选项。

# 要为给定的窗口小部件更改此设置，您必须在窗口小部件的父窗口上调用此方法。

# index
# 列索引。
# **选项
#**options
# minsize=
# 定义列的最小大小。请注意，如果列完全为空，则即使设置了此选项，也不会显示该列。
# pad=
# 填充以在设置整列的大小时添加到列中最大窗口小部件的大小。
# weight=
# 用于在列之间分配额外空间的相对权重。权重为2的列的增长速度是权重为1的列的两倍。默认值为0，表示该列根本不会增长。

# grid_configure(**options) [＃ ]
# 与网格相同。

# grid_forget（） [＃ ]
# 从网格管理器中删除此小部件。窗口小部件不会被销毁，并且可以通过网格或任何其他管理器再次显示。

# grid_info（） [＃ ]
# 返回包含此窗口小部件使用的单元格的当前单元格选项的字典。
    # 返回 ：
    # 包含网格网格此处的管理选项的字典。

# grid_location（x，y） [＃ ]
# 返回给定像素下（或最接近）给定像素的网格单元格。
# 返回：
# 包含列和行索引的元组。

# grid_propagate（flag） [＃ ]
# 启用或禁用几何体传播。启用后，只要子窗口小部件更改大小，连接到此窗口小部件的网格管理器就会尝试更改窗口小部件的大小。默认情况下始终启用传播。
# flag
# 为了启用传播，为真。

# grid_remove（） [＃ ]
# 从网格管理器中删除此小部件。窗口小部件不会被销毁，并且可以通过网格或任何其他管理器再次显示。

# grid_rowconfigure(index, **options) [＃ ]
# 设置一行单元格的选项。

# 要为给定的窗口小部件更改此设置，您必须在窗口小部件的父窗口上调用此方法。

# index
# 行索引。
# **options
# 行选项。
# minsize=
# 定义行的最小大小。请注意，如果某行完全为空，则即使设置了此选项，也不会显示该行。
# pad=
# 在设置整行的大小时，填充以添加行中最大窗口小部件的大小。
# weight=
# 用于在行之间分配额外空间的相对权重。具有权重2的行将增长到具有权重1的行的两倍。默认值为0，这意味着该行根本不会增长。

# grid_size（） [＃ ]
# 返回附加到此窗口小部件的几何管理器的当前网格大小。这被定义为网格中第一个空列和行的索引，按此顺序。
# 返回：
# 包含列数和行数的2元组。

# grid_slaves（row = None，column = None） [＃ ]
# 返回此窗口小部件管理的“从属”窗口小部件的列表。窗口小部件作为Tkinter窗口小部件引用返回。

master.mainloop()
